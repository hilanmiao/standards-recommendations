(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{388:function(t,e,a){"use strict";a.r(e);var s=a(26),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git规范"}},[t._v("#")]),t._v(" Git规范")]),t._v(" "),a("h2",{attrs:{id:"git-分支模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-分支模型"}},[t._v("#")]),t._v(" Git 分支模型")]),t._v(" "),a("h3",{attrs:{id:"master分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master分支"}},[t._v("#")]),t._v(" master分支")]),t._v(" "),a("p",[t._v("master分支表示一个稳定的发布版本.")]),t._v(" "),a("ul",[a("li",[t._v("场景: 所有应用会跟随版本迭代, 在dev分支测试稳定后, 会合并到master分支, 并使用tag标记应用版本")]),t._v(" "),a("li",[t._v("tag规范: "),a("code",[t._v("v{version}")]),t._v(", 例如v0.1.0")]),t._v(" "),a("li",[t._v("人员: 由项目负责人进行审核合并, 普通开发者没有权限")])]),t._v(" "),a("h3",{attrs:{id:"dev分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dev分支"}},[t._v("#")]),t._v(" dev分支")]),t._v(" "),a("p",[t._v("开发者主要工作的分支, 最新的特性或bug修复都会提交到这个分支. 开发者如果在该分支进行了提交，在push到远程之前应该先pull一下， 并尽量使用rebase模式，保证分支的简洁")]),t._v(" "),a("ul",[a("li",[t._v("命名规范: dev")]),t._v(" "),a("li",[t._v("tag规范: 在dev分支中也可能会经历发布过程, 例如bug修复版本. 这里同样使用tag来标记这些发布. 例如v0.1.1")]),t._v(" "),a("li",[t._v("提交规范：如果实在开发分支上进行开发，在推送到远程之前，应该使用"),a("code",[t._v("git rebase")]),t._v("形式更新本地分支。")])]),t._v(" "),a("h3",{attrs:{id:"feature分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feature分支"}},[t._v("#")]),t._v(" feature分支")]),t._v(" "),a("p",[t._v("涉及多人协作或者大功能的开发, 应该从dev分支checkout出独立的feature分支, 避免干扰dev分支")]),t._v(" "),a("ul",[a("li",[t._v("场景:\n"),a("ul",[a("li",[t._v("涉及多人协作: 团队多个成员在同一个项目下负责开发不同的功能, 这时候每个成员在自己的feature分支独立开发")]),t._v(" "),a("li",[t._v("大功能开发: 大功能开发跨越周期比较长, 需要多次迭代才会稳定. 这时候应该在独立的分支上开发. 方便跟踪历史记录, 也免于干扰dev分支的迭代和发布")])])]),t._v(" "),a("li",[t._v("命名规范\n"),a("ul",[a("li",[t._v("feature/name: name是功能名称")]),t._v(" "),a("li",[t._v("feature/version: 这也是团队常见的模式, 当无法使用一个功能名称来描述时, 可以使用版本号作为’功能’")])])]),t._v(" "),a("li",[t._v("合并时机\n"),a("ol",[a("li",[t._v("当feature分支迭代稳定, 并通过测试后, 合并到dev分支. 合并到dev后, "),a("strong",[t._v("feature分支的生命周期就结束了")]),t._v(". 后续bug修复和功能优化直接在dev开发")]),t._v(" "),a("li",[t._v("当多个feature分支需要合并对外发布临时版本时. 合并到preview分支 . ⚠️这种情况不应该合并到dev分支, 因为feature分支可能还不稳定或未完成. 比如为了联调某些功能.")])])]),t._v(" "),a("li",[t._v("合并方式\n"),a("ul",[a("li",[t._v("不要使用fast-forward. 这样可以在分支图上查看到分支历史")])])])]),t._v(" "),a("h3",{attrs:{id:"preview分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preview分支"}},[t._v("#")]),t._v(" preview分支")]),t._v(" "),a("p",[t._v("临时的预览分支, preview分支用于临时合并feature分支, 这其中可能会修复某些bug或者冲突. 可以选择性地将这些提交cherrypick回feature分支. 当预览结束后就可以销毁preview分支")]),t._v(" "),a("h3",{attrs:{id:"release分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#release分支"}},[t._v("#")]),t._v(" release分支")]),t._v(" "),a("p",[t._v("遵循gitflow规范")]),t._v(" "),a("ul",[a("li",[t._v("场景: 需要为某个正式版本修复bug(hotFix)时, 从master的对应tag中checkout release分支")]),t._v(" "),a("li",[t._v("命名规范: release/{version}")]),t._v(" "),a("li",[t._v("如何修复\n"),a("ul",[a("li",[t._v("如果对应bug可以在dev分支直接被修复, 可以先提交到dev分支(或者已经修复了), 然后再cherrypick到release分支")]),t._v(" "),a("li",[t._v("如果bug在新版本无法复现. 比如新版本升级了依赖. 那么在release分支直接修复即可")])])])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"提交信息规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交信息规范"}},[t._v("#")]),t._v(" 提交信息规范")]),t._v(" "),a("p",[t._v("一个好的提交信息, 会帮助你提高项目的整体质量.")]),t._v(" "),a("ul",[a("li",[t._v("why\n"),a("ul",[a("li",[t._v("格式统一的提交信息可以帮助自动化生成changelog")]),t._v(" "),a("li",[t._v("版本库不只是存放代码的仓库, 也记录项目的开发记录. 这些记录应该可以帮助后来者快速地学习和回顾代码. 也应该方便其他协作者review你的代码")])])]),t._v(" "),a("li",[t._v("原则: 半年后, 你能看懂你的commit做了什么东西")]),t._v(" "),a("li",[t._v("方式: 使用git commit(打开编辑器)而不是git commit -m")]),t._v(" "),a("li",[t._v("必要信息\n"),a("ul",[a("li",[t._v("为什么进行这次提交?\n"),a("ul",[a("li",[t._v("提交改变了什么, 让其他reviewer更容易审核代码和忽略无关的改变")])])]),t._v(" "),a("li",[t._v("如何解决的问题?\n"),a("ul",[a("li",[t._v("问题是什么导致的？")]),t._v(" "),a("li",[t._v("简短说明使用什么方式, 策略, 修复了问题.")])])]),t._v(" "),a("li",[t._v("变化可能影响哪些地方\n"),a("ul",[a("li",[t._v("说明变动功能的细节。 一个提交不应该做超过2个功能的变动")])])])])])]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.conventionalcommits.org/zh-hans/v1.0.0/",title:"约定式提交 1.0.0 官方中文文档",target:"_blank",rel:"noopener noreferrer"}},[t._v("约定式提交 1.0.0 官方中文文档"),a("OutboundLink")],1),t._v("\n前半段直接引用官方文档的部分内容！")])]),t._v(" "),a("h2",{attrs:{id:"约定式提交-1-0-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约定式提交-1-0-0"}},[t._v("#")]),t._v(" 约定式提交 1.0.0")]),t._v(" "),a("p",[t._v("约定式提交规范是一种基于提交信息的轻量级约定。\n它提供了一组简单规则来创建清晰的提交历史；\n这更有利于编写自动化工具。\n通过在提交信息中描述功能、修复和破坏性变更，\n使这种惯例与 "),a("a",{attrs:{href:"http://semver.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("SemVer"),a("OutboundLink")],1),t._v(" 相互对应。")]),t._v(" "),a("p",[t._v("提交说明的结构如下所示：")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("原文：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n")])])]),a("p",[t._v("译文：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<类型>[可选 范围]: <描述>\n\n[可选 正文]\n\n[可选 脚注]\n")])])]),a("hr"),t._v(" "),a("br"),t._v("\n提交说明包含了下面的结构化元素，以向类库使用者表明其意图：\n"),a("ol",[a("li",[a("strong",[t._v("fix:")]),t._v(" "),a("em",[t._v("类型")]),t._v(" 为 "),a("code",[t._v("fix")]),t._v(" 的提交表示在代码库中修复了一个 bug（这和语义化版本中的 "),a("a",{attrs:{href:"https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("PATCH")]),a("OutboundLink")],1),t._v(" 相对应）。")]),t._v(" "),a("li",[a("strong",[t._v("feat:")]),t._v(" "),a("em",[t._v("类型")]),t._v(" 为 "),a("code",[t._v("feat")]),t._v(" 的提交表示在代码库中新增了一个功能（这和语义化版本中的 "),a("a",{attrs:{href:"https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("MINOR")]),a("OutboundLink")],1),t._v(" 相对应）。")]),t._v(" "),a("li",[a("strong",[t._v("BREAKING CHANGE:")]),t._v(" 在脚注中包含 "),a("code",[t._v("BREAKING CHANGE:")]),t._v(" 或 <类型>(范围) 后面有一个 "),a("code",[t._v("!")]),t._v(" 的提交，表示引入了破坏性 API 变更（这和语义化版本中的 "),a("a",{attrs:{href:"https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("MAJOR")]),a("OutboundLink")],1),t._v(" 相对应）。\n破坏性变更可以是任意 "),a("em",[t._v("类型")]),t._v(" 提交的一部分。")]),t._v(" "),a("li",[t._v("除 "),a("code",[t._v("fix:")]),t._v(" 和 "),a("code",[t._v("feat:")]),t._v(" 之外，也可以使用其它提交 "),a("em",[t._v("类型")]),t._v(" ，例如 "),a("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional",target:"_blank",rel:"noopener noreferrer"}},[t._v("@commitlint/config-conventional"),a("OutboundLink")],1),t._v("（基于 "),a("a",{attrs:{href:"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular 约定"),a("OutboundLink")],1),t._v("）中推荐的 "),a("code",[t._v("build:")]),t._v("、"),a("code",[t._v("chore:")]),t._v("、\n"),a("code",[t._v("ci:")]),t._v("、"),a("code",[t._v("docs:")]),t._v("、"),a("code",[t._v("style:")]),t._v("、"),a("code",[t._v("refactor:")]),t._v("、"),a("code",[t._v("perf:")]),t._v("、"),a("code",[t._v("test:")]),t._v("，等等。")]),t._v(" "),a("li",[t._v("脚注中除了 "),a("code",[t._v("BREAKING CHANGE: <description>")]),t._v(" ，其它条目应该采用类似\n"),a("a",{attrs:{href:"https://git-scm.com/docs/git-interpret-trailers",target:"_blank",rel:"noopener noreferrer"}},[t._v("git trailer format"),a("OutboundLink")],1),t._v(" 这样的惯例。")])]),t._v(" "),a("p",[t._v("其它提交类型在约定式提交规范中并没有强制限制，并且在语义化版本中没有隐式影响（除非它们包含 BREAKING CHANGE）。\n"),a("br"),a("br"),t._v("\n可以为提交类型添加一个围在圆括号内的范围，以为其提供额外的上下文信息。例如 "),a("code",[t._v("feat(parser): adds ability to parse arrays.")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("h3",{attrs:{id:"包含了描述并且脚注中有破坏性变更的提交说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包含了描述并且脚注中有破坏性变更的提交说明"}},[t._v("#")]),t._v(" 包含了描述并且脚注中有破坏性变更的提交说明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("feat: allow provided config object to extend other configs\n\nBREAKING CHANGE: `extends` key in config file is now used for extending other config files\n")])])]),a("h3",{attrs:{id:"包含了-字符以提醒注意破坏性变更的提交说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包含了-字符以提醒注意破坏性变更的提交说明"}},[t._v("#")]),t._v(" 包含了 "),a("code",[t._v("!")]),t._v(" 字符以提醒注意破坏性变更的提交说明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("refactor!: drop support for Node 6\n")])])]),a("h3",{attrs:{id:"包含了-和-breaking-change-脚注的提交说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包含了-和-breaking-change-脚注的提交说明"}},[t._v("#")]),t._v(" 包含了 "),a("code",[t._v("!")]),t._v(" 和 BREAKING CHANGE 脚注的提交说明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("refactor!: drop support for Node 6\n\nBREAKING CHANGE: refactor to use JavaScript features not available in Node 6.\n")])])]),a("h3",{attrs:{id:"不包含正文的提交说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不包含正文的提交说明"}},[t._v("#")]),t._v(" 不包含正文的提交说明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docs: correct spelling of CHANGELOG\n")])])]),a("h3",{attrs:{id:"包含范围的提交说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包含范围的提交说明"}},[t._v("#")]),t._v(" 包含范围的提交说明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("feat(lang): add polish language\n")])])]),a("h3",{attrs:{id:"包含多行正文和多行脚注的提交说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包含多行正文和多行脚注的提交说明"}},[t._v("#")]),t._v(" 包含多行正文和多行脚注的提交说明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("fix: correct minor typos in code\n\nsee the issue for details\n\non typos fixed.\n\nReviewed-by: Z\nRefs #133\n")])])]),a("h2",{attrs:{id:"约定式提交规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约定式提交规范"}},[t._v("#")]),t._v(" 约定式提交规范")]),t._v(" "),a("p",[t._v("本文中的关键词 “必须（MUST）”、“禁止（MUST NOT）”、“必要（REQUIRED）”、“应当（SHALL）”、“不应当（SHALL NOT）”、“应该（SHOULD）”、“不应该（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）” 和 “可选（OPTIONAL）” ，其相关解释参考 "),a("a",{attrs:{href:"https://www.ietf.org/rfc/rfc2119.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 2119"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("ol",[a("li",[t._v("每个提交都"),a("strong",[t._v("必须")]),t._v("使用类型字段前缀，它由一个名词构成，诸如 "),a("code",[t._v("feat")]),t._v(" 或 "),a("code",[t._v("fix")]),t._v(" ，\n其后接"),a("strong",[t._v("可选的")]),t._v("范围字段，"),a("strong",[t._v("可选的")]),t._v(" "),a("code",[t._v("!")]),t._v("，以及"),a("strong",[t._v("必要的")]),t._v("冒号（英文半角）和空格。")]),t._v(" "),a("li",[t._v("当一个提交为应用或类库实现了新功能时，"),a("strong",[t._v("必须")]),t._v("使用 "),a("code",[t._v("feat")]),t._v(" 类型。")]),t._v(" "),a("li",[t._v("当一个提交为应用修复了 bug 时，"),a("strong",[t._v("必须")]),t._v("使用 "),a("code",[t._v("fix")]),t._v(" 类型。")]),t._v(" "),a("li",[t._v("范围字段"),a("strong",[t._v("可以")]),t._v("跟随在类型字段后面。范围"),a("strong",[t._v("必须")]),t._v("是一个描述某部分代码的名词，并用圆括号包围，例如： "),a("code",[t._v("fix(parser):")])]),t._v(" "),a("li",[t._v("描述字段"),a("strong",[t._v("必须")]),t._v("直接跟在 <类型>(范围) 前缀的冒号和空格之后。\n描述指的是对代码变更的简短总结，例如： "),a("em",[t._v("fix: array parsing issue when multiple spaces were contained in string")]),t._v(" 。")]),t._v(" "),a("li",[t._v("在简短描述之后，"),a("strong",[t._v("可以")]),t._v("编写较长的提交正文，为代码变更提供额外的上下文信息。正文"),a("strong",[t._v("必须")]),t._v("起始于描述字段结束的一个空行后。")]),t._v(" "),a("li",[t._v("提交的正文内容自由编写，并"),a("strong",[t._v("可以")]),t._v("使用空行分隔不同段落。")]),t._v(" "),a("li",[t._v("在正文结束的一个空行之后，"),a("strong",[t._v("可以")]),t._v("编写一行或多行脚注。每行脚注都"),a("strong",[t._v("必须")]),t._v("包含\n一个令牌（token），后面紧跟 "),a("code",[t._v(":<space>")]),t._v(" 或 "),a("code",[t._v("<space>#")]),t._v(" 作为分隔符，后面再紧跟令牌的值（受\n"),a("a",{attrs:{href:"https://git-scm.com/docs/git-interpret-trailers",target:"_blank",rel:"noopener noreferrer"}},[t._v("git trailer convention"),a("OutboundLink")],1),t._v(" 启发）。")]),t._v(" "),a("li",[t._v("脚注的令牌"),a("strong",[t._v("必须")]),t._v("使用 "),a("code",[t._v("-")]),t._v(" 作为连字符，比如 "),a("code",[t._v("Acked-by")]),t._v(" (这样有助于\n区分脚注和多行正文)。有一种例外情况就是 "),a("code",[t._v("BREAKING CHANGE")]),t._v("，它"),a("strong",[t._v("可以")]),t._v("被认为是一个令牌。")]),t._v(" "),a("li",[t._v("脚注的值"),a("strong",[t._v("可以")]),t._v("包含空格和换行，值的解析过程"),a("strong",[t._v("必须")]),t._v("直到下一个脚注的令牌/分隔符出现为止。")]),t._v(" "),a("li",[t._v("破坏性变更"),a("strong",[t._v("必须")]),t._v("在提交信息中标记出来，要么在 <类型>(范围) 前缀中标记，要么作为脚注的一项。")]),t._v(" "),a("li",[t._v("包含在脚注中时，破坏性变更"),a("strong",[t._v("必须")]),t._v("包含大写的文本 "),a("code",[t._v("BREAKING CHANGE")]),t._v("，后面紧跟着冒号、空格，然后是描述，例如：\n"),a("em",[t._v("BREAKING CHANGE: environment variables now take precedence over config files")]),t._v(" 。")]),t._v(" "),a("li",[t._v("包含在 <类型>(范围) 前缀时，破坏性变更"),a("strong",[t._v("必须")]),t._v("通过把 "),a("code",[t._v("!")]),t._v(" 直接放在 "),a("code",[t._v(":")]),t._v(" 前面标记出来。\n如果使用了 "),a("code",[t._v("!")]),t._v("，那么脚注中"),a("strong",[t._v("可以")]),t._v("不写 "),a("code",[t._v("BREAKING CHANGE:")]),t._v("，\n同时提交信息的描述中"),a("strong",[t._v("应该")]),t._v("用来描述破坏性变更。")]),t._v(" "),a("li",[t._v("在提交说明中，"),a("strong",[t._v("可以")]),t._v("使用 "),a("code",[t._v("feat")]),t._v(" 和 "),a("code",[t._v("fix")]),t._v(" 之外的类型，比如："),a("em",[t._v("docs: updated ref docs.")]),t._v(" 。")]),t._v(" "),a("li",[t._v("工具的实现必须"),a("strong",[t._v("不区分")]),t._v("大小写地解析构成约定式提交的信息单元，只有 "),a("code",[t._v("BREAKING CHANGE")]),t._v(" "),a("strong",[t._v("必须")]),t._v("是大写的。")]),t._v(" "),a("li",[t._v("BREAKING-CHANGE 作为脚注的令牌时"),a("strong",[t._v("必须")]),t._v("是 BREAKING CHANGE 的同义词。")])]),t._v(" "),a("h2",{attrs:{id:"为什么使用约定式提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用约定式提交"}},[t._v("#")]),t._v(" 为什么使用约定式提交")]),t._v(" "),a("ul",[a("li",[t._v("自动化生成 CHANGELOG。")]),t._v(" "),a("li",[t._v("基于提交的类型，自动决定语义化的版本变更。")]),t._v(" "),a("li",[t._v("向同事、公众与其他利益关系者传达变化的性质。")]),t._v(" "),a("li",[t._v("触发构建和部署流程。")]),t._v(" "),a("li",[t._v("让人们探索一个更加结构化的提交历史，以便降低对你的项目做出贡献的难度。")])]),t._v(" "),a("h2",{attrs:{id:"faq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[t._v("#")]),t._v(" FAQ")]),t._v(" "),a("h3",{attrs:{id:"在初始开发阶段我该如何处理提交说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在初始开发阶段我该如何处理提交说明"}},[t._v("#")]),t._v(" 在初始开发阶段我该如何处理提交说明？")]),t._v(" "),a("p",[t._v("我们建议你按照假设你已发布了产品那样来处理。因为通常总 "),a("em",[t._v("有人")]),t._v(" 使用你的软件，即便那是你软件开发的同事们。他们会希望知道诸如修复了什么、哪里不兼容等信息。")]),t._v(" "),a("h3",{attrs:{id:"提交标题中的类型是大写还是小写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交标题中的类型是大写还是小写"}},[t._v("#")]),t._v(" 提交标题中的类型是大写还是小写?")]),t._v(" "),a("p",[t._v("大小写都可以，但最好是一致的。")]),t._v(" "),a("h3",{attrs:{id:"如果提交符合多种类型我该如何操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果提交符合多种类型我该如何操作"}},[t._v("#")]),t._v(" 如果提交符合多种类型我该如何操作？")]),t._v(" "),a("p",[t._v("回退并尽可能创建多次提交。约定式提交的好处之一是能够促使我们做出更有组织的提交和 PR。")]),t._v(" "),a("h3",{attrs:{id:"这不会阻碍快速开发和迭代吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这不会阻碍快速开发和迭代吗"}},[t._v("#")]),t._v(" 这不会阻碍快速开发和迭代吗？")]),t._v(" "),a("p",[t._v("它阻碍的是以杂乱无章的方式快速前进。它助你能在横跨多个项目以及和多个贡献者协作时长期地快速演进。")]),t._v(" "),a("h3",{attrs:{id:"约定式提交会让开发者受限于提交的类型吗-因为他们会想着已提供的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约定式提交会让开发者受限于提交的类型吗-因为他们会想着已提供的类型"}},[t._v("#")]),t._v(" 约定式提交会让开发者受限于提交的类型吗（因为他们会想着已提供的类型）？")]),t._v(" "),a("p",[t._v("约定式提交鼓励我们更多地使用某些类型的提交，比如 "),a("code",[t._v("fixes")]),t._v("。除此之外，约定式提交的灵活性也允许你的团队使用自己的类型，并随着时间的推移更改这些类型。")]),t._v(" "),a("h3",{attrs:{id:"这和-semver-有什么关联呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这和-semver-有什么关联呢"}},[t._v("#")]),t._v(" 这和 SemVer 有什么关联呢？")]),t._v(" "),a("p",[a("code",[t._v("fix")]),t._v(" 类型提交应当对应到 "),a("code",[t._v("PATCH")]),t._v(" 版本。"),a("code",[t._v("feat")]),t._v(" 类型提交应该对应到 "),a("code",[t._v("MINOR")]),t._v(" 版本。带有 "),a("code",[t._v("BREAKING CHANGE")]),t._v(" 的提交不管类型如何，都应该对应到 "),a("code",[t._v("MAJOR")]),t._v(" 版本。")]),t._v(" "),a("h3",{attrs:{id:"我对约定式提交做了形如-jameswomack-conventional-commit-spec-的扩展-该如何版本化管理这些扩展呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我对约定式提交做了形如-jameswomack-conventional-commit-spec-的扩展-该如何版本化管理这些扩展呢"}},[t._v("#")]),t._v(" 我对约定式提交做了形如 "),a("code",[t._v("@jameswomack/conventional-commit-spec")]),t._v(" 的扩展，该如何版本化管理这些扩展呢？")]),t._v(" "),a("p",[t._v("我们推荐使用 SemVer 来发布你对于这个规范的扩展（并鼓励你创建这些扩展！）")]),t._v(" "),a("h3",{attrs:{id:"如果我不小心使用了错误的提交类型-该怎么办呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如果我不小心使用了错误的提交类型-该怎么办呢"}},[t._v("#")]),t._v(" 如果我不小心使用了错误的提交类型，该怎么办呢？")]),t._v(" "),a("h4",{attrs:{id:"当你使用了在规范中但错误的类型时-例如将-feat-写成了-fix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当你使用了在规范中但错误的类型时-例如将-feat-写成了-fix"}},[t._v("#")]),t._v(" 当你使用了在规范中但错误的类型时，例如将 "),a("code",[t._v("feat")]),t._v(" 写成了 "),a("code",[t._v("fix")])]),t._v(" "),a("p",[t._v("在合并或发布这个错误之前，我们建议使用 "),a("code",[t._v("git rebase -i")]),t._v(" 来编辑提交历史。而在发布之后，根据你使用的工具和流程不同，会有不同的清理方案。")]),t._v(" "),a("h4",{attrs:{id:"当使用了-不在-规范中的类型时-例如将-feat-写成了-feet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当使用了-不在-规范中的类型时-例如将-feat-写成了-feet"}},[t._v("#")]),t._v(" 当使用了 "),a("em",[t._v("不在")]),t._v(" 规范中的类型时，例如将 "),a("code",[t._v("feat")]),t._v(" 写成了 "),a("code",[t._v("feet")])]),t._v(" "),a("p",[t._v("在最坏的场景下，即便提交没有满足约定式提交的规范，也不会是世界末日。这只意味着这个提交会被基于规范的工具错过而已。")]),t._v(" "),a("h3",{attrs:{id:"所有的贡献者都需要使用约定式提交规范吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#所有的贡献者都需要使用约定式提交规范吗"}},[t._v("#")]),t._v(" 所有的贡献者都需要使用约定式提交规范吗？")]),t._v(" "),a("p",[t._v("并不！如果你使用基于 squash 的 Git 工作流，主管维护者可以在合并时清理提交信息——这不会对普通提交者产生额外的负担。\n有种常见的工作流是让 git 系统自动从 pull request 中 squash 出提交，并向主管维护者提供一份表单，用以在合并时输入合适的 git 提交信息。")]),t._v(" "),a("h3",{attrs:{id:"约定式提交规范中如何处理还原-revert-提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约定式提交规范中如何处理还原-revert-提交"}},[t._v("#")]),t._v(" 约定式提交规范中如何处理还原（revert）提交?")]),t._v(" "),a("p",[t._v("还原提交（Reverting）会比较复杂：你还原的是多个提交吗？如果你还原了一个功能模块，下次发布的应该是补丁吗？")]),t._v(" "),a("p",[t._v("约定式提交不能明确的定义还原行为。所以我们把这个问题留给工具开发者，\n基于 "),a("em",[t._v("类型")]),t._v(" 和 "),a("em",[t._v("脚注")]),t._v(" 的灵活性来开发他们自己的还原处理逻辑。")]),t._v(" "),a("p",[t._v("一种建议是使用 "),a("code",[t._v("revert")]),t._v(" 类型，和一个指向被还原提交摘要的脚注：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("revert: let us never again speak of the noodle incident\n\nRefs: 676104e, a215868\n")])])]),a("h2",{attrs:{id:"关于"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于"}},[t._v("#")]),t._v(" 关于")]),t._v(" "),a("p",[t._v("约定式提交规范受到了 "),a("a",{attrs:{href:"https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular 提交准则"),a("OutboundLink")],1),t._v("的启发，并在很大程度上以其为依据。")]),t._v(" "),a("h2",{attrs:{id:"用工具实现规范提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用工具实现规范提交"}},[t._v("#")]),t._v(" 用工具实现规范提交")]),t._v(" "),a("h3",{attrs:{id:"commitizen"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commitizen"}},[t._v("#")]),t._v(" commitizen")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitizen/cz-cli"),a("OutboundLink")],1),t._v(": Node.js 工具，用于创建遵循约定式提交规范的提交信息。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 全局安装\n$ npm install -g commitizen\n")])])]),a("p",[a("code",[t._v("Commitizen")]),t._v("支持多种不同的提交规范，可以安装和配置不同的适配器实现。以"),a("code",[t._v("Conventional Commit:cz-conventional-changelog(一个符合 Angular团队规范的 preset)")]),t._v("规范为例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 本地安装（不是所有项目都要符合规范，所以用本地配置更灵活）\ncommitizen init cz-conventional-changelog --save-dev --save-exact\n")])])]),a("p",[t._v("安装完成后，查看是否在"),a("code",[t._v("package.json")]),t._v("中已加入"),a("code",[t._v("cz-conventional-changelog")]),t._v("信息：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('...\n...\n  "devDependencies": {\n    "cz-conventional-changelog": "^3.0.2"\n  },\n  "config": {\n    "commitizen": {\n      "path": "./node_modules/cz-conventional-changelog"\n    }\n  }\n}\n')])])]),a("p",[t._v("安装完成后，使用"),a("code",[t._v("git-cz")]),t._v("替代"),a("code",[t._v("git commit")]),t._v("测试提交操作，通过提示信息辅助你完成标准化的提交日志。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("E:\\workSpace\\standards-recommendations>git-cz\ncz-cli@4.2.3, cz-conventional-changelog@3.3.0\n\n? Select the type of change that you're committing: (Use arrow keys)\n> feat:     A new feature\n  fix:      A bug fix\n  docs:     Documentation only changes\n  style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n  refactor: A code change that neither fixes a bug nor adds a feature\n  perf:     A code change that improves performance\n  test:     Adding missing tests or correcting existing tests\n(Move up and down to reveal more choices)\n\n")])])]),a("h3",{attrs:{id:"commitlint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commitlint"}},[t._v("#")]),t._v(" commitlint")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitlint"),a("OutboundLink")],1),t._v(": 可以检查 commit messages 是否符合常规提交格式，也需要一份校验配置，推荐 "),a("code",[t._v("@commitlint/config-conventional")]),t._v("(符合 Angular团队规范)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm i --save-dev @commitlint/config-conventional @commitlint/cli\n")])])]),a("p",[t._v("在项目根目录创建 commitlint.config.js 文件并设置校验规则：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@commitlint/config-conventional"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rules 里面可以设置一些自定义的校验规则")]),t._v("\n  rules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("也许 Angular 的那套规范我们不习惯, 那么可以通过指定 Adapter "),a("a",{attrs:{href:"https://github.com/leoforfree/cz-customizable",target:"_blank",rel:"noopener noreferrer"}},[t._v("cz-customizable"),a("OutboundLink")],1),t._v("指定一套符合自己团队的规范.你也可以使用自定义配置，如：把配置选项变成中文的。")]),t._v(" "),a("h3",{attrs:{id:"husky"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#husky"}},[t._v("#")]),t._v(" husky")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"}},[t._v("husky"),a("OutboundLink")],1),t._v("：可以让 "),a("code",[t._v("git hooks")]),t._v(" 变得更简单，在特定的重要动作触发自定义脚本。比如：当我们在提交或者推送代码的时候，可以使用它验证提交信息、运行测试、格式化代码、触发 CI/CD 等。")]),t._v(" "),a("p",[t._v("官网文档：https://typicode.github.io/husky/#/?id=usage （写作时安装版本6.x，和4.x不兼容）")]),t._v(" "),a("p",[t._v("官方提供了一键安装和配置脚本，推荐使用。")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("npx husky-init "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# npm")]),t._v("\nnpx husky-init "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Yarn 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" dlx husky-init --yarn2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Yarn 2")]),t._v("\n")])])]),a("p",[t._v("它将会生成"),a("code",[t._v(".husky")]),t._v("目录，修改"),a("code",[t._v("package.json")]),t._v("并创建一个"),a("code",[t._v("pre-commit")]),t._v("示例钩子文件。默认情况下当你提交的时候它会执行"),a("code",[t._v("npm test")]),t._v("（以后这里可以配置eslint），如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-986025901160ffa73a69eef80aa374b0a5f.png",alt:""}}),t._v(" "),a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-593b69663bb3e1519747983574c48bd74f6.png",alt:""}})]),t._v(" "),a("p",[t._v("我们"),a("code",[t._v("package.json scripts")]),t._v("中没有"),a("code",[t._v("test")]),t._v("脚本，所以运行"),a("code",[t._v("git commit...")]),t._v("会出错，如下图，所以我们暂时注释掉"),a("code",[t._v("npm test")]),t._v("或者先删掉"),a("code",[t._v("pre-commit")]),t._v("文件。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("E:\\workSpace\\standards-recommendations>git commit -m \"Keep calm and commit\"\n\n> standards-recommendations@1.0.0 test E:\\workSpace\\standards-recommendations\n> echo 'Error: no test specified'\n\n'Error: no test specified'\n[master 2605312] Keep calm and commit\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 husky.config.js\n\n")])])]),a("h3",{attrs:{id:"创建commit-msg钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建commit-msg钩子"}},[t._v("#")]),t._v(" 创建commit-msg钩子")]),t._v(" "),a("p",[t._v("使用"),a("code",[t._v("husky add")]),t._v("命令创建 ./husky/commit-msg 钩子：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# npm\nnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n\n# yarn\nyarn husky add .husky/commit-msg 'npx --no-install commitlint --edit \"$1\"'\n\n")])])]),a("blockquote",[a("p",[t._v("windows下不是很好使。... 'npx --no-...'，中间有空格不能正确识别？只能"),a("code",[t._v("npx husky add .husky/commit-msg")]),t._v("先创建文件再手动修改内容了。")])]),t._v(" "),a("p",[t._v("附上目前git支持的hook名称：\n"),a("img",{attrs:{src:"https://oscimg.oschina.net/oscnet/up-bbaa51d611c7c4b12dfbb280682db36fcfe.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"git-commit-测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-测试"}},[t._v("#")]),t._v(" git commit 测试")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('E:\\workSpace\\standards-recommendations>git commit -m "测试comimit-msg钩子"\n⧗   input: 测试comimit-msg钩子\n✖   subject may not be empty [subject-empty]\n✖   type may not be empty [type-empty]\n\n✖   found 2 problems, 0 warnings\nⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint\n\nhusky - commit-msg hook exited with code 1 (error)\n\n')])])]),a("p",[t._v("如果某一次提交想要禁用husky，可以添加参数--no-verify")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ git commit --no-verify -m "xxx"\n')])])]),a("h2",{attrs:{id:"徽章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#徽章"}},[t._v("#")]),t._v(" 徽章")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("README")]),t._v("中添加"),a("code",[t._v("commitizen")]),t._v("友好徽章\n"),a("a",{attrs:{href:"http://commitizen.github.io/cz-cli/",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/badge/commitizen-friendly-brightgreen.svg",alt:"Commitizen friendly"}}),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("README")]),t._v("中添加规范提交徽章\n"),a("a",{attrs:{href:"https://conventionalcommits.org",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg",alt:"Conventional Commits"}}),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);